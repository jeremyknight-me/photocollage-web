@page "/libraries/{libraryId:int}"
@using PhotoCollage.Web.Helpers.Queries
@rendermode InteractiveServer
@layout EmptyLayout

@inject IQueryHandler<GetFolderQuery, GetFolderQueryResponse> folderQueryHandler

<PageTitle>@Title</PageTitle>


@if (!@RendererInfo.IsInteractive || !isLoaded || this.model is null)
{
    <LoadingIndicator />
}
else
{
    <div class="d-flex flex-column h-100 w-100">
        <div class="border-bottom p-2 h-auto">@this.model.Name (@this.model.Path)</div>
        @*<div class="border-bottom p-2 h-auto">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="#">Home</a></li>
                    <li class="breadcrumb-item"><a href="#">Library</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Data</li>
                </ol>
            </nav>
        </div>*@
        <div class="flex-grow-1 overflow-y-auto">
            <div class="row row-cols-2 row-cols-sm-3 row-cols-md-4 row-cols-lg-6 g-0">
                <div class="col p-3 text-center">
                    <button type="button" class="btn btn-outline-light w-100" @onclick="Back" disabled="@IsRoot">
                        <i class="bi bi-arrow-left-square-fill fs-2"></i>
                        <br />
                        back...
                    </button>
                    <div>&nbsp;</div>
                </div>
                @foreach (var folder in this.model.Folders)
                {
                    <div class="col p-3 text-center">
                        <button type="button" class="btn btn-outline-light w-100" @onclick="@(e => ChangePath(folder.Path))">
                            <i class="bi bi-folder-fill fs-2"></i>
                            <br />
                            @folder.Name
                        </button>
                        <div class="text-center">Toggle</div>
                    </div>
                }
            </div>
        </div>
    </div>
}

@code
{
    private bool isLoaded = false;
    private GetFolderQueryResponse? model;

    [Parameter]
    public int LibraryId { get; set; }

    protected bool IsRoot => string.IsNullOrWhiteSpace(this.model?.Parent);

    protected string Title
    {
        get 
        {
            var prefix = model is null || string.IsNullOrWhiteSpace(model.Name)
                ? string.Empty
                : $"{model.Name} - ";
            return $"{prefix}Library Management";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await this.LoadFolder(string.Empty);
            this.StateHasChanged();
        }
    }

    private async Task Back()
    {
        if (this.IsRoot)
        {
            return;
        }

        await this.LoadFolder(this.model.Parent);
    }

    private async Task ChangePath(string path) 
        => await this.LoadFolder(path);

    private async Task LoadFolder(string path)
    {
        this.model = await this.folderQueryHandler.Handle(new GetFolderQuery { Path = path });
        this.isLoaded = true;
    }
}
